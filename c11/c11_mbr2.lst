     1                                           ;代码清单11-1
     2                                           ;文件名：c11_mbr2.asm
     3                                           ;文件说明：硬盘主引导扇区代码 
     4                                           ;创建日期：2020-6-22 18:00
     5                                        
     6                                           ;计算GDT所在的逻辑段地址 
     7 00000000 2EA1[D67C]                       mov ax,[cs:gdt_base+0x7c00]        ;低16位，这是以cs=0为起始的段，所以ax里存的就是物理地址
     8 00000004 2E8B16[D87C]                     mov dx,[cs:gdt_base+0x7c00+0x02]   ;高16位，gdt_base其实是一个偏移量
     9 00000009 BB1000                           mov bx,16        
    10 0000000C F7F3                             div bx                             ;除以16就得到了逻辑段地址和偏移地址
    11 0000000E 8ED8                             mov ds,ax                          ;令ds指向该段逻辑段地址以进行操作
    12 00000010 89D3                             mov bx,dx                          ;令bx指向段内起始偏移地址 
    13                                        
    14                                           ;创建0#描述符，它是空描述符，这是处理器的要求
    15 00000012 66C70700000000                   mov dword [bx+0x00],0x00
    16 00000019 66C7470400000000                 mov dword [bx+0x04],0x00
    17                                  
    18                                           ;创建#1描述符，保护模式下的数据段描述符（文本模式下的显示缓冲区） 
    19 00000021 66C74708FFFF0080                 mov dword [bx+0x08],0x8000ffff     
    20 00000029 66C7470C0B924000                 mov dword [bx+0x0c],0x0040920b     ;段描述符里有很多信息，这里的段基地址是000b8000
    21                                  
    22                                           ;创建#2描述符，保护模式下的代码段描述符
    23 00000031 66C74710FF01007C                 mov dword [bx+0x10],0x7c0001ff     ;低双字
    24 00000039 66C7471400984000                 mov dword [bx+0x14],0x00409800     ;高双字，段描述符里有很多信息，这里的段基地址是00007c00正好是主引导程序的起始地址
    25                                           
    26                                           ;初始化描述符表寄存器GDTR
    27 00000041 2EC706[D47C]1700                 mov word [cs: gdt_size+0x7c00],23  ;描述符表的界限（3个描述符总字节是24，总字节数减一）   
    28                                                                               
    29 00000048 2E0F0116[D47C]                   lgdt [cs: gdt_size+0x7c00]
    30                                        
    31 0000004E E492                             in al,0x92                         ;南桥芯片内的端口 
    32 00000050 0C02                             or al,0000_0010B
    33 00000052 E692                             out 0x92,al                        ;打开A20
    34                                  
    35 00000054 FA                               cli                                ;保护模式下中断机制尚未建立，应禁止中断 
    36                                                                              
    37 00000055 0F20C0                           mov eax,cr0
    38 00000058 6683C801                         or eax,1
    39 0000005C 0F22C0                           mov cr0,eax                        ;设置PE位
    40                                           
    41                                           ;以下进入保护模式... ...有不同
    42 0000005F EA[6400]1000                     jmp 0000000000010_0_00B:flush      ;直接绝对远转移指令，在实模式下vs保护模式下是不同的
    43                                                                              ;这之前是按照16位尺寸编译的，这之后是按照32位尺寸编译的，虽然不匹配，但是前面进流水线已经执行过了
    44                                           bits 32                            ;由此取到了代码段描述符，而它的D位是1，因此，后面flush以下就都变成32位了。因此jmp后面用了bits32
    45                                           
    46                                  flush:                                      ;从flush这里往下执行，处理器的默认尺寸就编程32位的了。这就要求后面的指令必须按照32位尺寸编译
    47 00000064 66B90800                         mov cx,0000000000001_0_00B         ;加载数据段选择子(0x01)到段选择器，发现要选的是1号描述符，就是第2个，里面存的段基地址是000b8000
    48 00000068 8ED9                             mov ds,cx                          ;让段选择器ds指向显存，现在ds描述符高速缓存器里里保存的基地址是b8000
    49                                           ;以下在屏幕上显示"Protect mode OK." flush后文本这段，在执行bits 32 之前都已经进了流水线，译码按照16位译的是错的，
    50                                           ;好在在jmp之后会清空流水线,刚刚的结果会被清理，处理器会串行化执行，处理器开始用32位操作尺寸重新填充流水线
    51 0000006A C6050000000050                   mov byte [0x00],'P'  
    52 00000071 C6050200000072                   mov byte [0x02],'r'
    53 00000078 C605040000006F                   mov byte [0x04],'o'
    54 0000007F C6050600000074                   mov byte [0x06],'t'
    55 00000086 C6050800000065                   mov byte [0x08],'e'
    56 0000008D C6050A00000063                   mov byte [0x0a],'c'
    57 00000094 C6050C00000074                   mov byte [0x0c],'t'
    58 0000009B C6050E00000020                   mov byte [0x0e],' '
    59 000000A2 C605100000006D                   mov byte [0x10],'m'
    60 000000A9 C605120000006F                   mov byte [0x12],'o'
    61 000000B0 C6051400000064                   mov byte [0x14],'d'
    62 000000B7 C6051600000065                   mov byte [0x16],'e'
    63 000000BE C6051800000020                   mov byte [0x18],' '
    64 000000C5 C6051A0000004F                   mov byte [0x1a],'O'
    65 000000CC C6051C0000004B                   mov byte [0x1c],'K'
    66                                  
    67 000000D3 F4                               hlt                                ;已经禁止中断，处理器将不会被唤醒 
    68                                  
    69                                  ;-------------------------------------------------------------------------------
    70                                       
    71 000000D4 0000                             gdt_size         dw 0              ;保存GDT的界限值
    72 000000D6 007E0000                         gdt_base         dd 0x00007e00     ;GDT的物理地址 
    73                                                               
    74 000000DA 00<rep 124h>                     times 510-($-$$) db 0
    75 000001FE 55AA                                              db 0x55,0xaa
